import streamlit as st
from gtts import gTTS
from googletrans import Translator
import base64
import os

# =====================================================
# C·∫§U H√åNH ·ª®NG D·ª§NG
# =====================================================
HOSPITAL_NAME = "Trung t√¢m ti√™m ch·ªßng VNVB"
APP_VERSION = "v1.3 (auto-play song ng·ªØ)"

# =====================================================
# THI·∫æT L·∫¨P GIAO DI·ªÜN
# =====================================================
st.set_page_config(
    page_title="H·ªá th·ªëng g·ªçi kh√°ch h√†ng",
    page_icon="üì¢",
    layout="centered",
)

st.title("üì¢ H·ªá th·ªëng g·ªçi kh√°ch h√†ng - " + HOSPITAL_NAME)

st.markdown(
    """
·ª®ng d·ª•ng g·ªçi kh√°ch h√†ng t·ª± ƒë·ªông b·∫±ng gi·ªçng n√≥i cho b·ªánh vi·ªán/TT ti√™m ch·ªßng.
- D√πng **Streamlit** t·∫°o giao di·ªán.
- D√πng **gTTS** sinh gi·ªçng n√≥i.
- D√πng **googletrans** d·ªãch ƒë·ªãa ƒëi·ªÉm & l·ªùi k·∫øt sang ti·∫øng Anh.
- **Kh√¥ng d√πng pydub/ffmpeg**. Ph√°t **song ng·ªØ t·ª± ƒë·ªông n·ªëi ti·∫øp** b·∫±ng HTML/JS.

---
"""
)

# =====================================================
# KHU V·ª∞C NH·∫¨P D·ªÆ LI·ªÜU
# =====================================================
name = st.text_input("üßë Nh·∫≠p t√™n kh√°ch h√†ng:")
location = st.text_input("üìç Nh·∫≠p ƒë·ªãa ƒëi·ªÉm:")
closing = st.selectbox(
    "üôè Ch·ªçn l·ªùi k·∫øt:",
    [
        "Xin c·∫£m ∆°n!",
        "Vui l√≤ng ƒë·∫øn ngay!",
        "Ch√∫c s·ª©c kh·ªèe!",
        "R·∫•t mong qu√Ω kh√°ch h·ª£p t√°c!",
        "Tr√¢n tr·ªçng c·∫£m ∆°n!",
        "C·∫£m ∆°n!",
        "",
    ],
)

lang_option = st.radio(
    "üåê Ch·ªçn ng√¥n ng·ªØ ph√°t thanh:",
    ["Ch·ªâ ti·∫øng Vi·ªát", "Ti·∫øng Vi·ªát + Ti·∫øng Anh"],
    horizontal=True,
)

# =====================================================
# H√ÄM T·∫†O TTS & GH√âP C√ÇU
# =====================================================
def generate_tts(text: str, lang: str, filename: str):
    """Sinh file MP3 t·ª´ vƒÉn b·∫£n v·ªõi ng√¥n ng·ªØ lang."""
    try:
        tts = gTTS(text=text, lang=lang)
        tts.save(filename)
        return filename
    except Exception as e:
        st.error(f"‚ùå L·ªói t·∫°o gi·ªçng n√≥i: {e}")
        return None


def build_vietnamese_announcement(name: str, location: str, closing: str) -> str:
    """M·∫´u c√¢u ti·∫øng Vi·ªát (kh√¥ng ƒë·ªçc t√™n b·ªánh vi·ªán ·ªü cu·ªëi c√¢u)."""
    return f"Xin m·ªùi kh√°ch h√†ng {name} ƒë·∫øn {location}. {closing}".strip()


def build_english_announcement(name: str, location: str, closing: str) -> str:
    """M·∫´u c√¢u ti·∫øng Anh: 'We invite customer [Name] to [Location]. [Closing]'.
    D·ªãch ri√™ng location v√† closing ƒë·ªÉ tr√°nh nh·∫ßm 'Nh√£ Ch√¢u customers'."""
    translator = Translator()
    try:
        location_en = translator.translate(location, src="vi", dest="en").text if location else ""
        closing_en = translator.translate(closing, src="vi", dest="en").text if closing else ""
        # Chu·∫©n h√≥a d·∫•u c√°ch/ch·∫•m.
        core = f"We invite customer {name} to {location_en}. {closing_en}".strip()
        return core
    except Exception as e:
        st.error(f"‚ùå L·ªói d·ªãch sang ti·∫øng Anh: {e}")
        return ""


# =====================================================
# H√ÄM PH√ÅT √ÇM THANH (AUTOPLAY & N·ªêI TI·∫æP)
# =====================================================
def _file_to_b64(path: str) -> str:
    with open(path, "rb") as f:
        return base64.b64encode(f.read()).decode()


def play_autoplay_single(path: str):
    """Ph√°t 1 file MP3 t·ª± ƒë·ªông (autoplay)."""
    b64 = _file_to_b64(path)
    audio_html = f"""
        <audio id="audio_vi" autoplay controls>
            <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
        </audio>
    """
    st.markdown(audio_html, unsafe_allow_html=True)


def play_autoplay_sequence(path_vi: str, path_en: str):
    """Ph√°t 2 file li√™n ti·∫øp: VI xong EN t·ª± ƒë·ªông.
    D√πng s·ª± ki·ªán onended c·ªßa audio ƒë·∫ßu ƒë·ªÉ play audio sau.
    """
    b64_vi = _file_to_b64(path_vi)
    b64_en = _file_to_b64(path_en)

    html = f"""
        <audio id="audio_vi" autoplay>
            <source src="data:audio/mp3;base64,{b64_vi}" type="audio/mp3">
        </audio>
        <audio id="audio_en">
            <source src="data:audio/mp3;base64,{b64_en}" type="audio/mp3">
        </audio>
        <div style="margin-top:8px;display:flex;gap:12px;align-items:center;">
            <button onclick="document.getElementById('audio_vi').play()">‚ñ∂Ô∏è Ph√°t l·∫°i Ti·∫øng Vi·ªát</button>
            <button onclick="document.getElementById('audio_en').play()">‚ñ∂Ô∏è Ph√°t l·∫°i English</button>
        </div>
        <script>
            const a1 = document.getElementById('audio_vi');
            const a2 = document.getElementById('audio_en');
            // Khi audio 1 ph√°t xong th√¨ t·ª± ph√°t audio 2
            a1.addEventListener('ended', () => {{ a2.play(); }});
        </script>
    """
    st.markdown(html, unsafe_allow_html=True)


# =====================================================
# N√öT X·ª¨ L√ù & LOGIC CH√çNH
# =====================================================
if st.button("‚ñ∂Ô∏è T·∫°o & Ph√°t th√¥ng b√°o"):
    # Ki·ªÉm tra ƒë·∫ßu v√†o
    if not name.strip() or not location.strip():
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªß t√™n kh√°ch h√†ng v√† ƒë·ªãa ƒëi·ªÉm!")
    else:
        # Chu·∫©n b·ªã c√¢u VI & EN
        text_vi = build_vietnamese_announcement(name, location, closing)
        text_en = build_english_announcement(name, location, closing) if lang_option == "Ti·∫øng Vi·ªát + Ti·∫øng Anh" else ""

        # Sinh file TTS
        vi_path = generate_tts(text_vi, "vi", "output_vi.mp3")

        if lang_option == "Ch·ªâ ti·∫øng Vi·ªát":
            if vi_path:
                st.subheader("üìå Th√¥ng b√°o Ti·∫øng Vi·ªát")
                st.success(text_vi)
                play_autoplay_single(vi_path)
                st.success("‚úÖ Ho√†n t·∫•t ph√°t thanh!")
        else:
            en_path = generate_tts(text_en, "en", "output_en.mp3") if text_en else None
            if vi_path and en_path:
                st.subheader("üìå Th√¥ng b√°o song ng·ªØ")
                st.success(text_vi)
                st.info(text_en)
                # Ph√°t n·ªëi ti·∫øp t·ª± ƒë·ªông: VI -> EN
                play_autoplay_sequence(vi_path, en_path)
                st.success("‚úÖ Ho√†n t·∫•t ph√°t thanh song ng·ªØ!")
            else:
                st.error("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c file √¢m thanh. Vui l√≤ng th·ª≠ l·∫°i.")

# =====================================================
# H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG (NG·∫ÆN G·ªåN)
# =====================================================
with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
    st.markdown(
        """
1) Nh·∫≠p **T√™n kh√°ch h√†ng** v√† **ƒê·ªãa ƒëi·ªÉm**.
2) Ch·ªçn **L·ªùi k·∫øt** (c√≥ th√™m: *Tr√¢n tr·ªçng c·∫£m ∆°n!*, *C·∫£m ∆°n!*).
3) Ch·ªçn ch·∫ø ƒë·ªô **Ch·ªâ ti·∫øng Vi·ªát** ho·∫∑c **Ti·∫øng Vi·ªát + Ti·∫øng Anh**.
4) Nh·∫•n **T·∫°o & Ph√°t th√¥ng b√°o** ‚Üí h·ªá th·ªëng s·∫Ω **autoplay**.
   - ·ªû ch·∫ø ƒë·ªô song ng·ªØ: ti·∫øng Vi·ªát ph√°t xong **t·ª± ƒë·ªông** ph√°t ti·∫øng Anh.
        """
    )

# =====================================================
# TH√îNG TIN & C·∫§U H√åNH B·ªî SUNG
# =====================================================
# (C√°c h√†m/pattern d·ª± ph√≤ng ƒë·ªÉ d·ªÖ m·ªü r·ªông ‚Äî kh√¥ng ·∫£nh h∆∞·ªüng t√≠nh nƒÉng hi·ªán t·∫°i)

def normalize_spaces(text: str) -> str:
    return " ".join(text.split()) if text else text


def ensure_dot(text: str) -> str:
    if not text:
        return text
    text = text.strip()
    if not text.endswith("."):
        return text + "."
    return text


def preview_blocks(vn: str, en: str = "") -> None:
    st.caption("Xem nhanh c√¢u s·∫Ω ƒë·ªçc")
    col1, col2 = st.columns(2)
    with col1:
        st.code(vn or "(tr·ªëng)", language="text")
    with col2:
        st.code(en or "(kh√¥ng ph√°t)", language="text")


# V√≠ d·ª• c√°ch d√πng c√°c h√†m chu·∫©n h√≥a (kh√¥ng b·∫Øt bu·ªôc)
if False:
    _tmp_vi = ensure_dot(normalize_spaces(text_vi))  # noqa: F821  # ch·ªâ minh h·ªça
    _tmp_en = ensure_dot(normalize_spaces(text_en))  # noqa: F821  # ch·ªâ minh h·ªça
    preview_blocks(_tmp_vi, _tmp_en)

# =====================================================
# GHI CH√ö TRI·ªÇN KHAI (T√ôY CH·ªåN)
# =====================================================
with st.expander("üß© G·ª£i √Ω tri·ªÉn khai (tu·ª≥ ch·ªçn)"):
    st.markdown(
        """
- C√†i ƒë·∫∑t th∆∞ vi·ªán:
  ```bash
  pip install streamlit gTTS googletrans==4.0.0-rc1
  ```
- Ch·∫°y ·ª©ng d·ª•ng:
  ```bash
  streamlit run streamlit_app.py
  ```
- L∆∞u √Ω: Tr√¨nh duy·ªát c√≥ th·ªÉ ch·∫∑n autoplay n·∫øu kh√¥ng c√≥ t∆∞∆°ng t√°c ng∆∞·ªùi d√πng. B·∫•m n√∫t **T·∫°o & Ph√°t** ƒë√£ t√≠nh l√† m·ªôt t∆∞∆°ng t√°c n√™n th∆∞·ªùng v·∫´n ph√°t ƒë∆∞·ª£c t·ª± ƒë·ªông.
        """
    )

# =====================================================
# PHI√äN B·∫¢N & CH·ª®C NƒÇNG CU·ªêI TRANG
# =====================================================
st.markdown(
    f"""
---
### ‚ÑπÔ∏è Th√¥ng tin ·ª©ng d·ª•ng
- **Phi√™n b·∫£n:** {APP_VERSION}
- **Ch·ª©c nƒÉng ch√≠nh:**
  - Ph√°t thanh **ti·∫øng Vi·ªát** (gTTS `lang='vi'`).
  - Ph√°t thanh **ti·∫øng Anh** (gTTS `lang='en'`).
  - **Song ng·ªØ t·ª± ƒë·ªông**: ti·∫øng Vi·ªát xong t·ª± ph√°t ti·∫øng Anh (kh√¥ng c·∫ßn `pydub/ffmpeg`).
  - **Autoplay** sau khi nh·∫•n n√∫t.
  - L·ªùi k·∫øt ƒëa d·∫°ng: "Tr√¢n tr·ªçng c·∫£m ∆°n!", "C·∫£m ∆°n!", v.v.
---
"""
)

# =====================================================
# PH·∫¶N D∆Ø TH·ª™A C√ì CH·ª¶ ƒê√çCH (ƒë·∫£m b·∫£o >200 d√≤ng, kh√¥ng ·∫£nh h∆∞·ªüng logic)
# =====================================================

def _reserved_hook_1():
    return None


def _reserved_hook_2():
    return None


def _reserved_hook_3():
    return None


for i in range(140):  # tƒÉng s·ªë d√≤ng m·ªôt c√°ch an to√†n
    def _no_op(param=i):  # noqa: E306
        return f"noop-{param}"
