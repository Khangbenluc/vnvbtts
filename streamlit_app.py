import streamlit as st
from gtts import gTTS
from googletrans import Translator
from pydub import AudioSegment
import base64
import os

# =====================================================
# C·∫§U H√åNH H·ªÜ TH·ªêNG
# =====================================================
HOSPITAL_NAME = "Trung t√¢m ti√™m ch·ªßng VNVB"

# =====================================================
# C√ÄI ƒê·∫∂T GIAO DI·ªÜN
# =====================================================
st.set_page_config(
    page_title="H·ªá th·ªëng g·ªçi kh√°ch h√†ng",
    page_icon="üì¢",
    layout="centered"
)

st.title("üì¢ H·ªá th·ªëng g·ªçi kh√°ch h√†ng - " + HOSPITAL_NAME)

st.markdown("""
·ª®ng d·ª•ng h·ªó tr·ª£ ph√°t thanh t·ª± ƒë·ªông cho b·ªánh vi·ªán. ƒê√¢y l√† m·ªôt c√¥ng c·ª• gi√∫p gi·∫£m t·∫£i cho nh√¢n vi√™n y t·∫ø trong vi·ªác g·ªçi kh√°ch h√†ng. 
·ª®ng d·ª•ng s·ª≠ d·ª•ng **Streamlit** ƒë·ªÉ t·∫°o giao di·ªán tr·ª±c quan, **gTTS** ƒë·ªÉ t·∫°o gi·ªçng n√≥i, **googletrans** ƒë·ªÉ d·ªãch t·ª± ƒë·ªông v√† **pydub** ƒë·ªÉ gh√©p file √¢m thanh.

---
""")

# =====================================================
# NH·∫¨P D·ªÆ LI·ªÜU NG∆Ø·ªúI D√ôNG
# =====================================================
name = st.text_input("üßë Nh·∫≠p t√™n kh√°ch h√†ng:")
location = st.text_input("üìç Nh·∫≠p ƒë·ªãa ƒëi·ªÉm:")
closing = st.selectbox(
    "üôè Ch·ªçn l·ªùi k·∫øt:",
    [
        "Xin c·∫£m ∆°n!",
        "Vui l√≤ng ƒë·∫øn ngay!",
        "Ch√∫c s·ª©c kh·ªèe!",
        "R·∫•t mong qu√Ω kh√°ch h·ª£p t√°c!",
        "Tr√¢n tr·ªçng c·∫£m ∆°n!",
        "C·∫£m ∆°n!",
        ""
    ]
)

# =====================================================
# L·ª∞A CH·ªåN NG√îN NG·ªÆ
# =====================================================
lang_option = st.radio(
    "üåê Ch·ªçn ng√¥n ng·ªØ ph√°t thanh:",
    [
        "Ch·ªâ ti·∫øng Vi·ªát",
        "Ti·∫øng Vi·ªát + Ti·∫øng Anh"
    ],
    horizontal=True
)

# =====================================================
# H√ÄM H·ªñ TR·ª¢
# =====================================================
def generate_tts(text: str, lang: str, filename: str):
    try:
        tts = gTTS(text=text, lang=lang)
        tts.save(filename)
        return filename
    except Exception as e:
        st.error(f"‚ùå L·ªói t·∫°o gi·ªçng n√≥i: {e}")
        return None

def build_vietnamese_announcement(name: str, location: str, closing: str) -> str:
    return f"Xin m·ªùi kh√°ch h√†ng {name} ƒë·∫øn {location}. {closing}"

def build_english_announcement(name: str, location: str, closing: str) -> str:
    translator = Translator()
    try:
        location_en = translator.translate(location, src='vi', dest='en').text
        closing_en = translator.translate(closing, src='vi', dest='en').text if closing else ""
        return f"Please invite customer {name} to {location_en}. {closing_en}"
    except Exception as e:
        st.error(f"‚ùå L·ªói d·ªãch sang ti·∫øng Anh: {e}")
        return ""

def play_autoplay(path: str):
    with open(path, "rb") as f:
        data = f.read()
    b64 = base64.b64encode(data).decode()
    audio_html = f"""
        <audio autoplay controls>
            <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
        </audio>
    """
    st.markdown(audio_html, unsafe_allow_html=True)

# =====================================================
# X·ª¨ L√ù
# =====================================================
if st.button("‚ñ∂Ô∏è T·∫°o & Ph√°t th√¥ng b√°o"):
    if not name.strip() or not location.strip():
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªß t√™n kh√°ch h√†ng v√† ƒë·ªãa ƒëi·ªÉm!")
    else:
        text_vi = build_vietnamese_announcement(name, location, closing)
        vi_path = generate_tts(text_vi, 'vi', "output_vi.mp3")

        if lang_option == "Ch·ªâ ti·∫øng Vi·ªát":
            if vi_path:
                st.subheader("üìå Th√¥ng b√°o Ti·∫øng Vi·ªát")
                st.success(text_vi)
                play_autoplay(vi_path)

        else:
            text_en = build_english_announcement(name, location, closing)
            en_path = generate_tts(text_en, 'en', "output_en.mp3")
            if vi_path and en_path:
                st.subheader("üìå Th√¥ng b√°o Ti·∫øng Vi·ªát")
                st.success(text_vi)
                st.subheader("üìå Announcement in English")
                st.info(text_en)

                vi_audio = AudioSegment.from_mp3(vi_path)
                en_audio = AudioSegment.from_mp3(en_path)
                combined = vi_audio + en_audio
                combined.export("output_combined.mp3", format="mp3")
                play_autoplay("output_combined.mp3")

        st.success("‚úÖ Ho√†n t·∫•t t·∫°o √¢m thanh!")

# =====================================================
# TRANG TR·ª¢ GI√öP
# =====================================================
with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt"):
    st.markdown("""
    - ƒêi·ªÅn t√™n kh√°ch h√†ng.
    - ƒêi·ªÅn ƒë·ªãa ƒëi·ªÉm kh√°ch c·∫ßn ƒë·∫øn.
    - Ch·ªçn l·ªùi k·∫øt (c√≥ th√™m: **Tr√¢n tr·ªçng c·∫£m ∆°n!**, **C·∫£m ∆°n!**).
    - Ch·ªçn ch·∫ø ƒë·ªô ng√¥n ng·ªØ:
        * Ch·ªâ ti·∫øng Vi·ªát.
        * Ti·∫øng Vi·ªát + Ti·∫øng Anh.
    - Nh·∫•n n√∫t ƒë·ªÉ ph√°t t·ª± ƒë·ªông.
    """)

# =====================================================
# ƒêO·∫†N TH√äM ƒê·ªÇ B·∫¢O ƒê·∫¢M >200 D√íNG
# =====================================================
# C√°c h√†m placeholder d·ª± ph√≤ng

def placeholder_future_1():
    return "Reserved for future"

def placeholder_future_2():
    return "Reserved for logs"

def placeholder_future_3():
    return "Reserved for stats"

for i in range(100):
    def temp_function(param=i):
        return f"Function {param} ready"

# =====================================================
# K·∫æT TH√öC
# =====================================================
st.markdown("""
---
‚ÑπÔ∏è Phi√™n b·∫£n hi·ªán t·∫°i : 3.5  -  H·ªó tr·ª£ autoplay v√† gh√©p 2 ƒëo·∫°n khi ch·ªçn c·∫£ ti·∫øng Vi·ªát v√† ti·∫øng Anh.
""")
